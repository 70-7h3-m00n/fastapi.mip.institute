name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

env:
  WORK_DIR: ${{ secrets.WORK_DIR }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v3
      - name: Set up SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" > ~/.ssh/known_hosts

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Determine image tag based on branch
        id: set-tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "TAG=main" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "TAG=dev" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      - name: Copy Docker Compose File to remote host
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            COMPOSE_FILE="docker-compose.prod.yml"
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            COMPOSE_FILE="docker-compose.dev.yml"
          fi
          
          scp $COMPOSE_FILE ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:${{ env.WORK_DIR }}/docker-compose.yml
          scp scripts/create_database.sql ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:${{ env.WORK_DIR }}/init-scripts/

      - name: Copy .env file to remote host
        run: |
          echo "POSTGRES_USER=${{ vars.POSTGRES_USER }}" > .env
          echo "POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ vars.POSTGRES_DB }}" >> .env
          echo "POSTGRES_HOST=${{ vars.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ vars.POSTGRES_PORT }}" >> .env
          echo "DB_ECHO=${{ vars.DB_ECHO }}" >> .env
          echo "CLOUDPAYMENTS_PUBLIC_ID=${{ vars.CLOUDPAYMENTS_PUBLIC_ID }}" >> .env
          echo "CLOUDPAYMENTS_API_SECRET=${{ vars.CLOUDPAYMENTS_API_SECRET }}" >> .env
          
          scp .env ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:${{ secrets.WORK_DIR }}/

      - name: Deploy Application
        run: |
          echo "Pulling image"
          ssh ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} "
            cd ${{ secrets.WORK_DIR }} &&
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO }}:${{ env.TAG }} &&
            echo 'Stopping existing containers' && 
            docker compose -f docker-compose.yml down && 
            echo 'Starting containers' && 
            docker compose -f docker-compose.yml up -d
          "
