name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Set up SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H "${{ secrets.REMOTE_HOST }}" > ~/.ssh/known_hosts
          docker context create remote --docker host=ssh://${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}

      - uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      # Copy the correct Docker Compose file based on branch
      - if: github.ref == 'refs/heads/main'
        name: Use Production Docker Compose File
        run: |
          docker context use remote
          cd ${{ secrets.WORK_DIR }}
          cp docker-compose.prod.yml docker-compose.yml
        env:
          CI_JOB_NUMBER: 1

      - if: github.ref == 'refs/heads/dev'
        name: Use Development Docker Compose File
        run: |
          docker context use remote
          cd ${{ secrets.WORK_DIR }}
          cp docker-compose.dev.yml docker-compose.yml
        env:
          CI_JOB_NUMBER: 1

      - name: Docker compose
        env:
          IMAGE_REF: ${{ steps.meta.outputs.tags }}
        run: |
          docker context use remote
          cd ${{ secrets.WORK_DIR }}
          docker compose -f docker-compose.yml up -d

      - name: cleanup
        run: |
          rm -rf ~/.ssh
